function [Dictionary, Bit_depth_Dict] = constellation_func(Constellation)
    switch Constellation
        case "BPSK"
            Dictionary = [complex(-1), ...
                          complex(1)];
            Bit_depth_Dict = 1;

        case "QPSK"
            Dictionary = [complex(-1, -1), ...
                          complex(-1,  1), ...
                          complex( 1, -1), ...
                          complex( 1,  1)];
            Bit_depth_Dict = 2;

        case "8PSK"
            Dictionary = [complex( 1         ,          0), ...
                          complex( 1/sqrt(2) ,  1/sqrt(2)), ...
                          complex(-1/sqrt(2) ,  1/sqrt(2)), ...
                          complex( 0         ,          1), ...
                          complex( 1/sqrt(2) , -1/sqrt(2)), ...
                          complex( 0         ,         -1), ...
                          complex(-1         ,          0), ...
                          complex(-1/sqrt(2) , -1/sqrt(2))];
            Bit_depth_Dict = 3;

        case "16-QAM"
            Dictionary = [complex(-3,  3), complex(-3,  1), ...
                          complex(-3, -3), complex(-3, -1), ...
                          complex(-1,  3), complex(-1,  1), ...
                          complex(-1, -3), complex(-1, -1), ...
                          complex( 3,  3), complex( 3,  1), ...
                          complex( 3, -3), complex( 3, -1), ...
                          complex( 1,  3), complex( 1,  1), ...
                          complex( 1, -3), complex( 1, -1)];
            Bit_depth_Dict = 4;

    end
    
    % Normalise the constellation.
    % Mean power of every constellation must be equel 1.
    % Make the function to calculate the norm, 
    % which can be applied for every constellation
    norm = sqrt(sum(Dictionary.*conj(Dictionary))/2^(Bit_depth_Dict));
    Dictionary = Dictionary./norm;

end

