% Фильтрация.
%> Отчистка workspace
clear all;
%> Закрытие рисунков
close all;
%> Отчистка Command Window
clc;

%% ========================================================================
%> Задача 1: Написать функцию, которая генерирует коэффиценты (импульсную 
%> характеристику)для фильтра корень из приподнятого косинуса.
%> Построить импульсную и частотную характеристику фильтра.
% =========================================================================

%> Длина фильтра в символах (число боковых лепестков sinc, сумма с двух сторон)
span = 20;
%> Число выборок на символ
nsamp  = 4;
%> Коэффицент сглаживания (alfa)
rolloff = 0.2;

sqimpuls = sqRCcoeff (span, nsamp, rolloff);

n = -span*nsamp / 2 : span*nsamp / 2;
f = -nsamp / 2 : 1 / span :nsamp/2;
figure 
plot(n,sqimpuls)
title('№1 Root raise cosine')

spectum = 10*log10(abs(fftshift(fft(sqimpuls))));
figure 
plot(f, spectum)
title('№1 Spectum RRC')

% =========================================================================
%> Проверка 1.
%> Сравнение со стандартной функцией
% =========================================================================

txfilter1 = comm.RaisedCosineTransmitFilter('RolloffFactor', rolloff, ...
                                           'FilterSpanInSymbols',span,...
                                           'OutputSamplesPerSymbol', nsamp);
check1 = coeffs(txfilter1);
if sum(abs(check1.Numerator-sqimpuls))< 0.001 % Проверка совпадения форм 
                                              % Импульсных характеристик 
                                              % с заданной точностью
    ans = 'Проверка задачи 1 пройдена успешно'
else 
    err = 'Ошибка в задаче 1. Проверьте коэффиценты'
    ans = sum(abs(check1.Numerator-sqimpuls))
end

%% ========================================================================
%> Задача 2: Написать функцию, которая генерирует коэффиценты (импульсную 
%> характеристику) для фильтра приподнятого косинуса.
%> Построить импульсную и частотную характеристику фильтра.
%> Построить импульсную характеристику для корня, без корня и соответсвующий sinc 
%> на одном графике
% =========================================================================

%> Длина фильтра в символах (число боковых лепестков sinc, сумма с двух сторон)
span = 20;
%> Число выборок на символ
nsamp  = 4;
%> Коэффицент сглаживания (alfa)
rolloff = 0.2;

impuls = RCcoeff(span, nsamp, rolloff);

n = -span*nsamp / 2 : span*nsamp / 2;
f = -nsamp / 2 : 1 / span :nsamp/2;
figure 
plot(n,impuls)
title('№2 Raise cosine(x)')

spectum = 10*log10(abs(fftshift(fft(impuls))));
figure 
plot(f, spectum)
title('№2 Spectum RC')

% =========================================================================
%> Проверка 2.
%> Сравнение со стандартной функцией
% =========================================================================

txfilter2 = comm.RaisedCosineTransmitFilter('RolloffFactor', rolloff, ...
                                            'FilterSpanInSymbols',span,...
                                            'OutputSamplesPerSymbol', nsamp,...
                                            'Shape', 'Normal');
check2 = coeffs(txfilter2);
if sum(abs(check2.Numerator-impuls))< 0.1 % Проверка совпадения форм 
                                          % Импульсных характеристик 
                                          % с заданной точностью
    ans = 'Проверка задачи 2 пройдена успешно'
else 
    err = 'Ошибка в задаче 2. Проверьте коэффиценты'
    ans = sum(abs(check2.Numerator-impuls))
end


%% ========================================================================
%> Задание 3. 
%> Напишите функцию фильтрации, которая работает в двух режимах: с
%> увеличением колличества выборок на символ и без (повторная фильтрация)
%> @warning используется функция mapping из прошлых работ
% =========================================================================
Constellation = 'QPSK';
[Dictionary, ~] = constellation_func(Constellation);

UpSempFlag = true(1);
bits = randi([0 1], 1, 1000); % генерация бит
sign = mapping(bits, 'QPSK'); % QPSK 500 символов 

figure
scatter(real(sign), imag(sign), 20, 'filled')
title('№3 Сигнальное созвездие перед RRC фильтром');

filtsign = Filtration(sign, sqimpuls, nsamp, UpSempFlag);
    
% =====================================================================
%> Проверка 3.1
%> Проверяем корректность работы ф-ии с передескретизацией со станднартной функцией.
% =====================================================================
check3 = txfilter1(sign.').';

if sum(abs(check3-filtsign))< 0.1 % Проверка совпадения форм 
                                  % Импульсных характеристик 
                                  % с заданной точностью
    ans = 'Проверка задачи 3.1 пройдена успешно'
else 
    err = 'Ошибка в задаче 3.1. Проверьте фильтр'
    ans = sum(abs(check3-filtsign))
end

figure
scatter(real(filtsign), imag(filtsign), 20, 'filled')
title('№3 Сигнальное созвездие после RRC фильтра TX');

% =====================================================================
%> Проверка 3.2
%> Проверяем корректность работы ф-ии без передескретизации со станднартной функцией.
% =====================================================================
UpSempFlag = false(1); 
filtsign2 = Filtration(filtsign, sqimpuls, nsamp, UpSempFlag);
rxfilter = comm.RaisedCosineReceiveFilter('RolloffFactor', rolloff, ...
                                          'FilterSpanInSymbols',span,...
                                          'InputSamplesPerSymbol', nsamp,...
                                          'DecimationFactor', 1);
check4 = rxfilter(filtsign.').';
if sum(abs(check4-filtsign2))< 0.1 % Проверка совпадения форм 
                                   % Импульсных характеристик 
                                   % с заданной точностью
    ans = 'Проверка задачи 3.2 пройдена успешно'
else 
    err = 'Ошибка в задаче 3.2. Проверьте фильтр'
    ans = sum(abs(check4-filtsign2))
end

figure
scatter(real(filtsign2), imag(filtsign2))
title('№3 Сигнальное созвездие RX');

%% ====================================================================
%> Задание 4
%> Система с шумом
% =====================================================================
Constellation = 'QPSK';

UpSempFlag = true(1);
bits = randi([0 1], 1, 1000); % генерация бит
sign = mapping(bits, Constellation); % QPSK 500 символов

filtsign_tx = Filtration(sign, sqimpuls, nsamp, 1);

figure
scatter(real(filtsign_tx), imag(filtsign_tx))
title('№4 Сигнальное созвездие после RRC фильтра TX');

[filtsign_noise, ~] = NoiseGenerator(filtsign_tx, 30); 

% figure
% scatter(real(filtsign_noise), imag(filtsign_noise))
% title('№4 Сигнальное созвездие после RRC и SNR = 30');

filtsign_rx = Filtration(filtsign_noise, sqimpuls, nsamp, 0);
% 
% figure
% scatter(real(filtsign_rx), imag(filtsign_rx))
% title('№4 Сигнальное созвездие RX');

% n = 1:2000;
% figure
% plot(n, abs(filtsign_tx), n, abs(filtsign_rx))
% title('№4 Сравнение сигналов RX & TX');

signal_downsample = filtsign_rx(1:4:end);

n = 1:500;
figure
plot(n, abs(sign), n, abs(signal_downsample))
title('№4 Сравнение сигнала RX & TX');

% Появилась задержка в 20 отсчетов = длина фильтра

% n = 1 : 500 - 20;
% figure
% plot(n, abs(sign(1:end-20)), n, abs(signal_downsample(21:end)))
% title('№4 Без задержки');

% При 30 db сигналы на rx и tx полностью совпали

bits_TX = demapping(sign(1:end-20), Constellation, false, 30);
bits_RX = demapping(signal_downsample(21:end), Constellation, false, 30);

ans = Error_check(bits_TX, bits_RX)

%% ====================================================================
%> Задание 5
%> MER для системы с частотным сдвигом
% =====================================================================

bandwidth = length(filtsign) * (rolloff + 1) / nsamp;
MER = zeros(length(101));
BER = zeros(length(101));


it = 1;
for ii = 0:100
    bits = randi([0 1], 1, 1000); % генерация бит

    sign = mapping(bits, 'QPSK'); % QPSK 500 символов 

    filtsign_tx = Filtration(sign, sqimpuls, nsamp, 1);
    
    t = 1:length(filtsign_tx);
    delta_tap = bandwidth * ii / 100;
    delta_f = delta_tap / length(filtsign_tx);
    offset = exp(2*pi*1i*delta_f.*t);
    filtsign_offset = filtsign_tx .* offset;
    
    [filtsign_noise, ~] = NoiseGenerator(filtsign_offset, 30);

    filtsign_rx = Filtration(filtsign_noise, sqimpuls, nsamp, 0);

    scatter(real(filtsign_rx), imag(filtsign_rx))

    if mod(ii, 2) == 0
        inv_offset = conj(offset);
    else
        inv_offset = conj(offset) .* exp(-pi*1i.*t/4);
    end

    signal_baseband = filtsign_rx .* inv_offset;

    scatter(real(signal_baseband), imag(signal_baseband))

    signal_downsample = signal_baseband(1:4:end);

    scatter(real(signal_downsample(21:end)), imag(signal_downsample(21:end)))

    MER(it) = MER_my_func(signal_downsample(21:end), 'QPSK');

    bits_TX = demapping(sign(1:end-20), Constellation, false, 30);
    bits_RX = demapping(signal_downsample(21:end), Constellation, false, 30);

    
    it = it + 1;


end

persents = 0:100;
plot(persents, MER(1:end))
title('MER(Freq offset)')
ylabel('MER, dB')
xlabel('frequency offset, % of bandwidth')